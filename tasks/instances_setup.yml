---
# subtasks for deploy cluster

- name: Set instance name in tier {{ tier.key }}
  ansible.builtin.set_fact:
    instance_name: '{{ tier.key }}-{{ (groups["all"].index(inventory_hostname) +1)*1000 + instance_num|int }}'

- name: Print instance_id and instance_num in tier {{ tier.key }}
  ansible.builtin.debug:
    msg: 'instance_id = {{ instance_id }}   instance_num = {{ instance_num }}   instance_name = {{ instance_name }}'
  run_once: true
  when: debug == true

- name: Create dirs for instance in tier {{ tier.key }}
  ansible.builtin.file:
    name: '{{ data_dir }}/{{ cluster_name }}/{{ instance_name }}'
    state: directory
    owner: '{{ user }}'
    group: '{{ group }}'
    mode: '{{ dir_mode }}'

- name: Generate service-password file in instance dir
  ansible.builtin.lineinfile:
    path: '{{ data_dir }}/{{ cluster_name }}/{{ instance_name }}/.picodata-cookie'
    regexp: '.*'
    line: '{{ service_password }}'
    create: true
    owner: '{{ user }}'
    group: '{{ group }}'
    mode: '0400'
  when: service_password is defined

- name: Create config file for instances in tier {{ tier.key }}
  ansible.builtin.template:
    src: instance-conf.j2
    dest: '{{ conf_dir }}/{{ cluster_name }}/{{ instance_name }}.conf'
    owner: '{{ user }}'
    group: '{{ group }}'
  notify:
    - restart

- name: Save target for prometheus in tier {{ tier.key }}
  ansible.builtin.set_fact:
    list_instances: '{{ list_instances | union([instance_name]) }}'
    list_target: '{{ list_target | union( [listen_address + ":" + "{0:d}".format(first_http_port+instance_num|int) + "/metrics"] ) }}'
    list_http: '{{ list_http | union( [listen_address + ":" + "{0:d}".format(first_http_port+instance_num|int)] ) }}'
    list_pg: '{{ list_pg | union( [listen_address + ":" + "{0:d}".format(first_pg_port+instance_num|int)] ) }}'
    list_bin: '{{ list_bin | union( [listen_address + ":" + "{0:d}".format(first_bin_port+instance_num|int)] ) }}'

- block:
  - name: Create dirs for instances in tier {{ tier.key }}
    ansible.builtin.file:
      path: '{{ systemd_dir }}/{{ cluster_name }}@{{ instance_name }}.service.d'
      state: directory

  - name: Create systemd-env file for instances in tier {{ tier.key }}
    ansible.builtin.template:
      src: systemd-unit-env.j2
      dest: '{{ systemd_dir }}/{{ cluster_name }}@{{ instance_name }}.service.d/env.conf'
      force: true
    notify:
      - restart

  - name: Enable systemd services for {{ instance_name }} in tier {{ tier.key }}
    ansible.builtin.systemd:
      name: '{{ cluster_name }}@{{ instance_name }}'
      enabled: true
      state: started
      daemon_reload: true
      scope: '{{ systemd_scope }}'
      force: true
    environment:
      XDG_RUNTIME_DIR: /run/user/{{uid.stdout}}
    register: result

  - name: Check restart if needed
    ansible.builtin.set_fact:
      need_restart: false
    when: result.changed == true

  become: true
  become_user: '{{ systemd_user }}'
  when: init_system == 'systemd'
# end block

- name: Create supervisord conf-files for instances in tier {{ tier.key }}
  ansible.builtin.template:
    src: supervisord-apps.j2
    dest: '{{ supervisord_dir }}/{{ cluster_name }}/{{ instance_name }}.conf'
    force: true
  when: init_system == 'supervisord'
  notify:
    - restart

- name: Calculate next port number on server for all tiers
  ansible.builtin.set_fact:
    instance_num: '{{ instance_num|int + 1}}'