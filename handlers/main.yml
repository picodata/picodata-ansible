---
# handlers file for picodata-ansible

- name: Restart all instances
  ansible.builtin.include_tasks:
    file: restart.yml
  when: need_restart | bool == true
  listen: restart

- name: Wait for PG-port and continue with play
  ansible.builtin.wait_for:
    host: '{{ pg_address }}'
    port: '{{ first_pg_port }}'
    delay: '{{ pg_port_delay }}'
  run_once: true
  listen: apply_db_config

- name: Wait 10 sec and apply db_config
# 10 секунд нужны для исключения ошибки 'raft: proposal dropped'
  ansible.builtin.shell:
    cmd: >
         sleep 10 &&
         cat {{ conf_dir }}/{{ cluster_name }}/dbconfig.sql |
           {{ bin_dir }}/picodata admin {{ run_dir }}/{{ cluster_name }}/{{ instances_on_host[0] }}.sock
  retries: 3
  delay: 5
  run_once: true
  listen: apply_db_config
  when: tag != 'restore'

- name: Apply sql_file
  ansible.builtin.shell:
    cmd: >
         cat {{ conf_dir }}/{{ cluster_name }}/after_deploy.sql |
           {{ bin_dir }}/picodata admin {{ run_dir }}/{{ cluster_name }}/{{ instances_on_host[0] }}.sock
  run_once: true
  listen: apply_sql_file
  when: tag != 'restore'

- name: Message about targets for Prometheus
  ansible.builtin.debug:
    msg: 'Infrormation about of instances is saved to file {{ report_dir }}/report.yml on this host (ansible controller)'
  delegate_to: localhost
  run_once: true
  listen: messages

- name: Save report about endpoint per server
  ansible.builtin.template:
    src: report.j2
    dest: '{{ conf_dir }}/{{ cluster_name }}/report.yml'
    owner: '{{ user }}'
    group: '{{ group }}'
  listen: refactor

- name: Save report about endpoint of all instances
  become: false
  ansible.builtin.template:
    src: report_all.j2
    dest: '{{ report_dir }}/report.yml'
  delegate_to: localhost
  run_once: true
  listen: refactor
