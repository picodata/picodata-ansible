---
# tasks for backup

- name: ({{ cluster_name }}) Copy utility files on remote hosts
  ansible.builtin.template:
    src: backup.sh.j2
    dest: '{{ backup_dir }}/backup.sh'
    mode: '0755'
    owner: '{{ user }}'
    group: '{{ group }}'
    force: true

- name: ({{ cluster_name }}) Generate list of instances per server
  ansible.builtin.import_tasks:
    file: genin.yml

- name: ({{ cluster_name }}) Set current time
  ansible.builtin.set_fact:
    YYYYMMDDHHSS: '{{ "%Y%m%d%H%M%S" | strftime }}'
  run_once: true
  delegate_to: localhost

- name: ({{ cluster_name }}) Set current time
  ansible.builtin.set_fact:
    DT: '{{ YYYYMMDDHHSS }}'

- name: ({{ cluster_name }}) Debug
  debug:
    msg: 'BACKUP_DIR: {{ DT }}'
  run_once: true

- name: ({{ cluster_name }}) Backup instances
  ansible.builtin.command:
    cmd: '{{ backup_dir }}/backup.sh -s {{ run_dir }}/{{ cluster_name }}/{{ instance }}.sock -d {{ backup_dir }}/{{ cluster_name }}/{{ DT }}'
  loop: '{{ instances_on_host }}'
  loop_control:
    loop_var: instance

- block:
  - name: ({{ cluster_name }}) Pack backups for fetch
    ansible.builtin.shell:
      chdir: '{{ backup_dir }}//{{ cluster_name }}/{{ DT }}'
      cmd: 'tar -cf {{ backup_dir }}/{{ cluster_name }}/{{ inventory_hostname }}.tar *'

  - name: ({{ cluster_name }}) Fetch backups from remote hosts
    ansible.builtin.fetch:
      src: '{{ backup_dir }}/{{ cluster_name }}/{{ inventory_hostname }}.tar'
      dest: '{{ backup_fetch_dir }}/{{ cluster_name }}/{{ DT }}/{{ inventory_hostname }}.tar'
      flat: true

  - name: ({{ cluster_name }}) Remove archive on remote hosts
    ansible.builtin.file:
      path: '{{ backup_dir }}/{{ cluster_name }}/{{ inventory_hostname }}.tar'
      state: absent

  when: backup_fetch == True
# end block

- name: ({{ cluster_name }}) Remove utility files on remote hosts
  ansible.builtin.file:
    path: '{{ backup_dir }}/backup.sh'
    state: absent
  when: debug != true
