---
# tasks for plugins
- block:

  - name: ({{ cluster_name }}) Debug {{ plugin.key }}
    ansible.builtin.debug:
      var: plugin
    when: debug == true

  - name: ({{ cluster_name }}) Unarchive package into plugins-dir {{ plugin.key }}
    ansible.builtin.unarchive:
      src: '{{ plugin.value.path }}'
      dest: '{{ plugins_dir }}'
      owner: '{{ user }}'
      group: '{{ group }}'
      list_files: true
    run_once: false
    register: archive

  - name: ({{ cluster_name }}) Change ownership for plugins-dir {{ plugin.key }}
    ansible.builtin.file:
      dest: '{{ plugins_dir }}'
      owner: '{{ user }}'
      group: '{{ group }}'
      recurse: yes
    run_once: false

  - name: ({{ cluster_name }}) Find manifest file {{ plugin.key }}
    ansible.builtin.set_fact:
      manifest_file: "{{ archive.files | select('ansible.builtin.search', '.*/manifest.yaml$') | list | first }}"

  - name: ({{ cluster_name }}) Create temporary directory {{ plugin.key }}
    become: false
    ansible.builtin.tempfile:
      state: directory
      suffix: build
    delegate_to: localhost
    register: tempdir

  - name: ({{ cluster_name }}) Unarchive manifest file from package to temporary directory {{ plugin.key }}
    become: false
    ansible.builtin.command:
      cmd: 'tar -C {{ tempdir.path }} -xvzf {{ plugin.value.path }} {{ manifest_file }}'
    args:
      creates: '{{ tempdir.path }}/{{ manifest_file }}'
    delegate_to: localhost

  - name: ({{ cluster_name }}) Load manifest file from temporary directory {{ plugin.key }}
    ansible.builtin.set_fact:
      manifest: "{{ lookup('file', '{{ tempdir.path }}/{{ manifest_file }}') | from_yaml }}"

  - name: ({{ cluster_name }}) Remove temporary directory {{ plugin.key }}
    become: false
    ansible.builtin.file:
      path: '{{ tempdir.path }}'
      state: absent
    delegate_to: localhost

  - name: ({{ cluster_name }}) Set empty value for conf variable if no config {{ plugin.key }}
    ansible.builtin.set_fact:
      conf: ""
    when: plugin.value.config is undefined

  - name: ({{ cluster_name }}) Load config file {{ plugin.key }}
    ansible.builtin.set_fact:
      conf: "{{ lookup('file', '{{ plugin.value.config }}') | from_yaml }}"
    when: plugin.value.config is defined

  - name: ({{ cluster_name }}) Get services from manifest {{ plugin.key }}
    ansible.builtin.set_fact:
      services: '{{ manifest.services | map(attribute="name") | list }}'

  - name: ({{ cluster_name }}) Checking for plugin has been installed {{ plugin.key }}
    ansible.builtin.shell:
      cmd: >
           echo "select enabled from _pico_plugin where name='{{ manifest.name }}' and version='{{ manifest.version }}'" |
           {{ bin_dir }}/picodata admin {{ run_dir }}/{{ cluster_name }}/{{ instances_on_host[0] }}.sock |
           grep true | wc -l
    register: plugin_status

  - name: ({{ cluster_name }}) Debug plugin_status {{ plugin.key }}
    ansible.builtin.debug:
      var: plugin_status
    when: debug == true

  - name: ({{ cluster_name }}) Set plugin_enable flag {{ plugin.key }}
    ansible.builtin.set_fact:
      plugin_enable: '{{ plugin.value.enable | default(true) }}'

  # TODO (deprecated) убрать в версии 26.1
  - name: ({{ cluster_name }}) Set plugin_enable flag for compability {{ plugin.key }}
    ansible.builtin.set_fact:
      plugin_enable: '{{ not (plugin.value.do_not_enable_plugin | bool) }}'
    when: plugin.value.do_not_enable_plugin is defined

  - block:
    - name: ({{ cluster_name }}) Generate install.sql file into plugin path {{ plugin.key }}
      ansible.builtin.template:
        src: config2sql.j2
        dest: '{{ plugins_dir }}/{{ manifest.name }}/{{ manifest.version }}/install.sql'
        force: true
        owner: '{{ user }}'
        group: '{{ group }}'

    - name: ({{ cluster_name }}) Set plugin_install_sql flag {{ plugin.key }}
      ansible.builtin.set_fact:
        plugin_install_sql: '{{ plugin.value.install_sql | default(true) }}'

    # TODO (deprecated) убрать в версии 26.1
    - name: ({{ cluster_name }}) Set plugin_install_sql flag for compability {{ plugin.key }}
      ansible.builtin.set_fact:
        plugin_install_sql: '{{ not (plugin.value.do_not_run_plugin_install_sql | bool) }}'
      when: plugin.value.do_not_run_plugin_install_sql is defined

    - name: ({{ cluster_name }}) Install plugin into cluster (run install.sql) {{ plugin.key }}
      ansible.builtin.shell:
        cmd: >
            { echo "\set d ;"; cat {{ plugins_dir }}/{{ manifest.name }}/{{ manifest.version }}/install.sql; } |
            {{ bin_dir }}/picodata admin {{ run_dir }}/{{ cluster_name }}/{{ instances_on_host[0] }}.sock
      when: plugin_install_sql | bool == true

    when: plugin_status.stdout == "0"

  - block:

    - name: ({{ cluster_name }}) Copy plugin config on server {{ plugin.key }}
      ansible.builtin.copy:
        src: '{{ plugin.value.config }}'
        dest: '{{ plugins_dir }}/{{ manifest.name }}/{{ manifest.version }}/config.yaml'
        owner: '{{ user }}'
        group: '{{ group }}'
      register: res

    - name: ({{ cluster_name }}) Configure plugin {{ plugin.key }}
      ansible.builtin.shell:
        cmd: >
             {{ bin_dir }}/picodata plugin configure {{ manifest.name }} {{ manifest.version }}
             {{ plugins_dir }}/{{ manifest.name }}/{{ manifest.version }}/config.yaml
             --peer {{ listen_address }}:{{ first_bin_port }}
             {% if iproto_tls == true %}
             --tls-auth
             --tls-cert {{ cert_dir }}/{{ cluster_name }}/tls/{{ iproto_cert_file | basename }}
             --tls-key {{ cert_dir }}/{{ cluster_name }}/tls/{{ iproto_key_file | basename }}
             --tls-ca {{ cert_dir }}/{{ cluster_name }}/tls/{{ iproto_ca_file | basename }}
             {% endif %}
             --service-password-file {{ data_dir }}/{{ cluster_name }}/{{ instances_on_host[0] }}/.picodata-cookie
             --timeout {{ plugin.value.plugin_timeout | default(300) }}
      when: res.changed is defined and res.changed == true

      ignore_errors: True

    when: plugin.value.config is defined and plugin.value.config != '' and plugin_install_sql | bool == true and plugin_enable == true

  run_once: true
