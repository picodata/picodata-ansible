---
# tasks for deploy cluster

- name: Check admin password is defined
  ansible.builtin.fail:
    msg: 'Error! Your need define admin password (admin_password variable)!'
  when: admin_password is undefined
  run_once: true
  delegate_to: localhost

- name: Print topology
  ansible.builtin.debug:
    msg: "Id: {{ item.key }} Count: {{ item.value.instances_per_server }} Replication factor: {{item.value.replication_factor | default('1')}}"
  loop: "{{ lookup('ansible.builtin.dict', tiers, wantlist=True) }}"
  run_once: true
  when: debug == true

- name: Set listen address for every host
  ansible.builtin.set_fact:
    listen_address: "{{ listen_address }}"
  when: hostvars[inventory_hostname]['listen_address'] is undefined

- name: Check picodata is installed
  ansible.builtin.command:
    cmd: 'picodata --version'
  register: result
  ignore_errors: true

- name: Set flag for install picodata needed
  ansible.builtin.set_fact:
    install_packages: true
  when: result.rc != 0

- name: Unset flag for install picodata if exists
  ansible.builtin.set_fact:
    install_packages: false
  when: result.rc == 0

- name: Need to install Picodata package
  ansible.builtin.fail:
    msg: 'Error! Your need install Picodata package on every server in cluster!'
  when: install_packages == true and rootless == true
  run_once: true
  delegate_to: localhost

- name: Set flag for skip check install tasks
  ansible.builtin.set_fact:
    skip_check_install: true

- name: Deploy tasks for become
  ansible.builtin.include_tasks:
    file: deploy_become.yml
  when: rootless == false or (rootless == true and init_system == 'systemd')

- name: Set failure domain
  ansible.builtin.set_fact:
    fd: '"DC":"{{ group_names }}","HOST":"{{ inventory_hostname }}"'
  when: not fd_uniq_per_instance

- name: Debug failure domain
  ansible.builtin.debug:
    msg: 'fd is {{ fd }}'
  when: not fd_uniq_per_instance

- name: Set server failure domain
  ansible.builtin.set_fact:
    host_group: "none"
  when: host_group is undefined

- name: Merge systemd params
  ansible.builtin.set_fact:
    systemd_params: '{{ systemd_params_default | ansible.builtin.combine(systemd_params|default({})) }}'
  run_once: true

- name: Debug systemd_params
  ansible.builtin.debug:
    var: systemd_params
  run_once: true
  when: debug == true

- name: Generate template file for systemd
  become: true
  become_user: '{{ systemd_user }}'
  ansible.builtin.template:
    src: systemd-unit-service.j2
    dest: '{{ systemd_dir }}/{{ cluster_name }}@.service'
    force: true
  when: init_system == 'systemd'

- name: Clear sql-file for db_config
  ansible.builtin.file:
    state: absent
    path: '{{ conf_dir }}/{{ cluster_name }}/dbconfig.sql'

- name: Generate sql-file for db_config
  ansible.builtin.lineinfile:
    create: true
    path: '{{ conf_dir }}/{{ cluster_name }}/dbconfig.sql'
    line: 'alter system set "{{ item.key }}" = {{ item.value }} for all tiers;'
  loop: "{{ lookup('ansible.builtin.dict', db_config | default({}), wantlist=True) }}"
  run_once: true
  notify:
    - apply_db_config

- name: Init instance number on server
  ansible.builtin.set_fact:
    instance_num: 0

- name: Tiers setup
  ansible.builtin.include_tasks:
    file: tiers_setup.yml
  loop: "{{ lookup('ansible.builtin.dict', tiers, wantlist=True) }}"
  loop_control:
    loop_var: tier
    extended: true

- name: Update cluster in supervisord
  ansible.builtin.command:
    cmd: '/usr/bin/supervisorctl -c {{ supervisord_dir }}/{{ cluster_name }}.conf update'
  when: init_system == 'supervisord'

- name: Generate list of instances per server
  ansible.builtin.include_tasks:
    file: genin.yml

- name: Wait creating admin-sock files for all instances
  ansible.builtin.wait_for:
    path: '{{ run_dir }}/{{ cluster_name }}/{{ item }}.sock'
    state: present
    msg: 'Timeout to find file {{ run_dir }}/{{ cluster_name }}/{{ item }}.sock'
    timeout: 60
  loop: '{{ instances_on_host }}'

- name: Set admin password
  ansible.builtin.shell:
    cmd: echo "alter user \"admin\" password '{{ admin_password }}' using md5; alter user \"admin\" with login;" | picodata admin {{ run_dir }}/{{ cluster_name }}/{{ instances_on_host[0] }}.sock
  retries: 3
  delay: 5
  run_once: true

- name: Install plugins
  ansible.builtin.include_tasks:
    file: plugins.yml
  when: plugins is defined