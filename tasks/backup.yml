---
# tasks for backup
#   - get list of instances
#   - run BACKUP over sql on first instance any server

- name: ({{ cluster_name }}) Generate list of instances per server
  ansible.builtin.import_tasks:
    file: genin.yml

- name: ({{ cluster_name }}) Backup instances
  ansible.builtin.shell:
    cmd: >
         echo "BACKUP;" | {{ bin_dir }}/picodata admin {{ run_dir }}/{{ cluster_name }}/{{ instances_on_host[0] }}.sock
  register: backup_result
  run_once: true

- name: ({{ cluster_name }}) Debug backup_result
  ansible.builtin.debug:
    var: backup_result.stdout
  run_once: true
  when: debug == true

- name: ({{ cluster_name }}) Get name of current backup
  ansible.builtin.set_fact:
    current_backup: "{{ backup_result.stdout | regex_search('.*([0-9]{8}T[0-9]{6})', '\\1', multiline=true) | last }}"

- name: ({{ cluster_name }}) Check backup
  ansible.builtin.fail:
    msg: 'Ошибка при формировании бэкапа!'
  when: current_backup == ''
  delegate_to: localhost
  run_once: true

- name: ({{ cluster_name }}) Print current backup name
  ansible.builtin.debug:
    msg: 'Current backup is: {{ current_backup  }}'
  run_once: true

- name: ({{ cluster_name }}) Create backup_dir
  ansible.builtin.file:
    path: '{{ backup_dir }}/{{ cluster_name }}'
    state: directory
    owner: '{{ user }}'
    group: '{{ group }}'
    mode: '0755'

- block:
  - name: ({{ cluster_name }}) Pack backups for fetch
    ansible.builtin.shell:
      chdir: '{{ backup_dir }}//{{ cluster_name }}/'
      cmd: 'tar -cf {{ backup_dir }}/{{ cluster_name }}/{{ inventory_hostname }}.tar */{{ current_backup }}'

  # `become: false` дабы не было OOM
  - name: ({{ cluster_name }}) Fetch backups from remote hosts
    become: false
    ansible.builtin.fetch:
      src: '{{ backup_dir }}/{{ cluster_name }}/{{ inventory_hostname }}.tar'
      dest: '{{ backup_fetch_dir }}/{{ cluster_name }}/{{ current_backup }}/{{ inventory_hostname }}.tar'
      flat: true

  - name: ({{ cluster_name }}) Remove archive on remote hosts
    ansible.builtin.file:
      path: '{{ backup_dir }}/{{ cluster_name }}/{{ inventory_hostname }}.tar'
      state: absent

  when: backup_fetch == True
# end block
