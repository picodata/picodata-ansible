---

- block:
  - name: ({{ cluster_name }}) Check picodata is installed
    ansible.builtin.stat:
      path: '{{ bin_dir }}/picodata'
    register: result

  - name: ({{ cluster_name }}) Set flag for install picodata needed
    ansible.builtin.set_fact:
      install_packages: '{{ not result.stat.exists }}'

  when: skip_check_install is undefined
# end block

- name: ({{ cluster_name }}) Install picodata packages
  ansible.builtin.include_tasks:
    file: install_packages.yml
  when: install_packages

- block:
  - name: ({{ cluster_name }}) Create backup dirs for cluster
    ansible.builtin.file:
      name: '{{ item }}'
      state: directory
      owner: '{{ user }}'
      group: '{{ group }}'
      mode: '0755'
    loop:
      - '{{ conf_dir }}'
      - '{{ data_dir }}'
      - '{{ log_dir }}'
      - '{{ run_dir }}'
      - '{{ share_dir }}'
      - '{{ cert_dir }}'
      - '{{ backup_dir }}'
      - '{{ backup_dir }}/{{ cluster_name }}'

  - name: ({{ cluster_name }}) Create dirs for cluster
    ansible.builtin.file:
      name: '{{ item }}'
      state: directory
      owner: '{{ user }}'
      group: '{{ group }}'
      mode: '{{ dir_mode }}'
    loop:
      - '{{ conf_dir }}/{{ cluster_name }}'
      - '{{ log_dir }}/{{ cluster_name }}'
      - '{{ data_dir }}/{{ cluster_name }}'
      - '{{ share_dir }}/{{ cluster_name }}'
      - '{{ run_dir }}/{{ cluster_name }}'
      - '{{ cert_dir }}/{{ cluster_name }}'

  - name: ({{ cluster_name }}) Create dirs for supervisord
    ansible.builtin.file:
      name: '{{ item }}'
      state: directory
      owner: '{{ user }}'
      group: '{{ group }}'
      mode: '{{ dir_mode }}'
    loop:
      - '{{ supervisord_dir }}'
      - '{{ supervisord_dir }}/{{ cluster_name }}'
    when: init_system == 'supervisord'

  - name: ({{ cluster_name }}) 'Configure rundir'
    ansible.builtin.copy:
      content: |
        d {{ run_dir }} {{ dir_mode }} {{ user }} {{ group }}
        d {{ run_dir }}/{{ cluster_name }} {{ dir_mode }} {{ user }} {{ group }}
      dest: '/etc/tmpfiles.d/picodata.conf'
      mode: 0644

  - block:
    - name: ({{ cluster_name }}) Generate service unit for supervisord
      ansible.builtin.template:
        src: supervisord-unit-service.j2
        dest: '{{ systemd_dir }}/supervisord-{{ cluster_name }}.service'
        force: true

    - name: ({{ cluster_name }}) Generate cluster config file for supervisord
      ansible.builtin.template:
        src: supervisord-conf.j2
        dest: '{{ supervisord_dir }}/{{ cluster_name }}.conf'
        force: true

    - name: ({{ cluster_name }}) Enable systemd service for supervisord
      ansible.builtin.systemd:
        name: 'supervisord-{{ cluster_name }}.service'
        enabled: true
        state: started
        daemon_reload: true
        force: true
        scope: '{{ systemd_scope }}'
      register: supervisord_service

    - name: ({{ cluster_name }}) Check restart if needed
      ansible.builtin.set_fact:
        need_restart: false
      when: supervisord_service.changed == true

    when: init_system == 'supervisord' and systemd_scope == 'system'
  # end block

  - name: ({{ cluster_name }}) Generate logrotate file
    ansible.builtin.template:
      src: logrotate.j2
      dest: '/etc/logrotate.d/picodata-{{ cluster_name }}'
      force: true
    when: log_to == 'file'

  - name: ({{ cluster_name }}) Systemd linger enabled
    ansible.builtin.command:
      cmd: 'loginctl enable-linger {{ user }}'
      creates: '/var/lib/systemd/linger/{{ user }}'
    when: rootless == true and systemd_scope == 'user'

    become: true
# end block
