---
# tasks for stop cluster

- name: ({{ cluster_name }}) Set server failure domain
  ansible.builtin.set_fact:
    host_group: "none"
  when: host_group is undefined

- name: ({{ cluster_name }}) Generate list of instances per server
  ansible.builtin.include_tasks:
    file: genin.yml
  when: instances_on_host is undefined

- name: ({{ cluster_name }}) Set filter on instances
  ansible.builtin.set_fact:
    instances_filtered: '{{ instances_on_host | select ("search", filter | default(".*")) | list }}'

- block:
  - name: ({{ cluster_name }}) Stop systemd units without autonames
    become_user: '{{ systemd_user }}'
    throttle: '{{ serial_host_restart | default(100) }}'
    ansible.builtin.systemd:
      name: '{{ cluster_name }}@{{ instance }}.service'
      state: stopped
      scope: '{{ systemd_scope }}'
      enabled: '{{ enable | default(true) }}'
    loop: '{{ instances_filtered }}'
    loop_control:
      loop_var: instance
    ignore_errors: True
    environment:
      XDG_RUNTIME_DIR: /run/user/{{uid.stdout}}
    when: autonames == false

  - name: ({{ cluster_name }}) Stop systemd units with autonames
    become_user: '{{ systemd_user }}'
    throttle: '{{ serial_host_restart | default(100) }}'
    ansible.builtin.systemd:
      name: '{{ cluster_name }}-{{ instance }}.service'
      state: stopped
      scope: '{{ systemd_scope }}'
      enabled: '{{ enable | default(true) }}'
    loop: '{{ instances_filtered }}'
    loop_control:
      loop_var: instance
    ignore_errors: True
    environment:
      XDG_RUNTIME_DIR: /run/user/{{uid.stdout}}
    when: autonames == true

  when: init_system == 'systemd'

- name: ({{ cluster_name }}) Stop supervisord processes
  throttle: '{{ serial_host_restart | default(100) }}'
  ansible.builtin.shell:
    cmd: /usr/bin/supervisorctl -c {{ supervisord_dir }}/{{ cluster_name }}.conf stop {{ instance }}
  loop: '{{ instances_filtered }}'
  loop_control:
    loop_var: instance
  when: init_system == 'supervisord'
