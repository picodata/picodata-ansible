---
# tasks for restore cluster


- name: ({{ cluster_name }}) Copy utility files
  ansible.builtin.template:
    src: restore.sh.j2
    dest: '{{ backup_dir }}/restore.sh'
    mode: '0755'
    owner: '{{ user }}'
    group: '{{ group }}'
    force: true

- block:
  - name: ({{ cluster_name }}) Get list of local backups
    become: false
    ansible.builtin.find:
      paths: '{{ backup_fetch_dir }}/{{ cluster_name }}'
      depth: 1
      file_type: directory
      use_regex: yes
      patterns: ['^[0-9]{14}$']
    register: restore_dirs
    run_once: true
    delegate_to: localhost
    when: restore_dir is undefined

  - name: ({{ cluster_name }}) Set backup_dir
    ansible.builtin.set_fact:
      restore_dir: '{{ restore_dirs.files | map(attribute="path") | list | max | basename }}'
      backup_fetch: true
    when: restore_dir is undefined

  - name: ({{ cluster_name }}) Debug
    debug:
      msg: 'restore_dir: {{ restore_dir }}'

  - name: ({{ cluster_name }}) Create dir on remote hosts
    ansible.builtin.file:
      path: '{{ backup_dir }}/{{ cluster_name }}/{{ restore_dir }}'
      state: directory

  - name: ({{ cluster_name }}) Unpack backup
    ansible.builtin.unarchive:
      src: '{{ backup_fetch_dir }}/{{ cluster_name }}/{{ restore_dir }}/{{ inventory_hostname }}.tar'
      dest: '{{ backup_dir }}/{{ cluster_name }}/{{ restore_dir }}'
      owner: '{{ user }}'
      group: '{{ group }}'

  when: backup_fetch == True

- name: ({{ cluster_name }}) Restore data
  become_user: '{{ systemd_user }}'
  ansible.builtin.command:
    cmd: '{{ backup_dir }}/restore.sh -n {{ cluster_name }} -d {{ data_dir }} -b {{ backup_dir }}/{{ cluster_name }}/{{ restore_dir }}'
  environment:
    XDG_RUNTIME_DIR: /run/user/{{uid.stdout}}

- name: ({{ cluster_name }}) Remove utility files
  ansible.builtin.file:
    path: '{{ backup_dir }}/{{ item }}'
    state: absent
  loop:
    - restore.sh
  when: debug != true

- name: ({{ cluster_name }}) Make links for instance name
  ansible.builtin.include_tasks:
    file: make_links.yml
  when: autonames|bool == true
