[Unit]
Description=Picodata cluster {{ cluster_id }}@%i
After=network.target

[Service]
Type=simple
ExecStart=/usr/bin/picodata run
Restart=on-failure
RestartSec=2
User={{ user }}
Group={{ group }}

Environment=PICODATA_ADMIN_SOCK={{ run_dir }}/{{ cluster_id }}/%i.sock
Environment=PICODATA_DATA_DIR={{ data_dir }}/{{ cluster_id }}/%i
Environment=PICODATA_INSTANCE_ID=%i
Environment=PICODATA_PEER={{ main_peer }}:{{ first_bin_port }}
Environment=PICODATA_LOG_LEVEL={{ log_level }}
Environment=PICODATA_PLUGIN_DIR={{ data_dir }}/{{ cluster_id }}/plugins
Environment=RUST_BACKTRACE=full
{% if log_to == "file" %}
Environment=PICODATA_LOG={{ log_dir }}/{{ cluster_id }}/%i.log
{% endif %}
Environment=PICODATA_FAILURE_DOMAIN={% if fd_uniq_per_instance %}I=%i{% else %}{{ fd }}{% endif %}

{% if service_password is defined %}
Environment=PICODATA_SERVICE_PASSWORD_FILE={{ conf_dir }}/{{ cluster_id }}/.service-password
{% endif %}

{% if audit %}
Environment=PICODATA_AUDIT_LOG={{ log_dir }}/{{ cluster_id }}/audit-%i.log
{% endif %}

ExecStartPre=/bin/sh -c 'mkdir -p {{ data_dir }}/{{ cluster_id }}/%i'
ExecStartPre=/bin/sh -c 'mkdir -p {{ run_dir }}'

# Unlimited cores size
LimitCORE=infinity
# Disable OOM killer
OOMScoreAdjust=-1000
# Increase fd limit for Vinyl
LimitNOFILE=65535

# Systemd waits until all xlogs are recovered
TimeoutStartSec=86400s
# Give a reasonable amount of time to close xlogs
TimeoutStopSec=20s

[Install]
WantedBy=multi-user.target
Alias={{ cluster_id }}.%i

